// Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
(function() {

	$(function() {
		$("#appstats-date-showhide").click(function() {
			$("#appstats-date-filter").toggle();
		});
	});

})();

$(document).on("turbolinks:load", function() {
	var dateFormat = "mm/dd/yy",
		from = $("#from").datepicker({
			defaultDate: "-180d",
			maxDate: 0,
			changeMonth: true,
			changeYear: true,
			numberOfMonths: 1
		})
		.on("change", function() {
			to.datepicker("option", "minDate", getDate(this));
		}),
		to = $("#to").datepicker({
			defaultDate: "+0",
			maxDate: 0,
			changeMonth: true,
			changeYear: true,
			numberOfMonths: 1
		})
		.on("change", function() {
			from.datepicker("option", "maxDate", getDate(this));
		});

		$("#from").datepicker('setDate', new Date(new Date() - 180*24*60*60*1000));
		$("#to").datepicker('setDate', new Date());
		var number = document.getElementById("num");
		if (number) { 
			number.onkeydown = function(e) {
				console.log(e.keyCode);
			    if(!((e.keyCode > 95 && e.keyCode < 106) || (e.keyCode > 47 && e.keyCode < 58) || e.keyCode == 8)) {
			        return false;
			    }
			};
			number.value = "20"; 
		}

	function getDate(element) {
		var date;
		try {
			date = $.datepicker.parseDate(dateFormat, element.value);
		} catch (error) {
			date = null;
		}

		return date;
	}
});

function printDate() {
	// var from = $("#from").datepicker("getDate");
	// var to = $("#to").datepicker("getDate");
	// var range = [from, to];
	// console.log(range);
	// console.log(document.getElementById("num").value);
}

function lighten() {
	var id = "#" + event.target.id;
	if (id != "#") {
		d3.select(id).select(".areaMini").style("fill", "lightsteelblue");
	}
}

function darken() {
	var id = "#" + event.target.id;
	if (id != "#") {
		d3.select(id).select(".areaMini").style("fill", "steelblue");
	}
}

function mergeSort(arr, order) {
    if (arr.length < 2) {
        return arr;
    }
 
    var middle = parseInt(arr.length / 2);
    var left   = arr.slice(0, middle);
    var right  = arr.slice(middle, arr.length);
 
    return merge(mergeSort(left), mergeSort(right), order);
}
 
function merge(left, right, order) {
    var result = [];
    var leftComp;
    var rightComp;
 
    while (left.length && right.length) {
    	leftComp = getComp(left, right, order);
    	rightComp = getComp(right, left, order);
        if (leftComp <= rightComp) {
            result.push(left.shift());
        } else {
            result.push(right.shift());
        }
    }
 
    while (left.length) {
        result.push(left.shift());
    }
 
    while (right.length) {
        result.push(right.shift());
    }
 
    return result;
}

function getComp(left, right, order) {
	switch(order) {
		case 0: return left[0].rank;
		case 1: return right[0].rank;
		case 2: return left[0].label;
		case 3: return right[0].label;
		case 4: return left[0].serves;
		case 5: return right[0].serves;
		case 6: return left[0].clicks;
		case 7: return right[0].clicks;
		case 8: return left[0].ratio;
		case 9: return right[0].ratio;
	}
}





